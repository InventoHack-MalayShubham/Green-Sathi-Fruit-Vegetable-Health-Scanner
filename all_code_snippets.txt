

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\all_code_snippets.txt -----


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\app.py -----
import os
from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, current_user, login_required, login_user, logout_user
from models import db, User, ScanHistory
from werkzeug.utils import secure_filename
from services.llama_service import LllamaHealthAnalyzer
from services.usda_service import USDAClient
from services.deepseek_service import DeepSeekRecommender
import json
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import markdown


app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev_secret_key')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = os.path.join('static', 'uploads')
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Add custom filters
@app.template_filter('markdown')
def markdown_filter(text):
    if not text:
        return ''
    return markdown.markdown(text, extensions=['extra', 'nl2br'])

@app.template_filter('replace')
def replace_filter(value, old, new):
    if not value:
        return ''
    return value.replace(old, new)

@app.template_filter('format_nutrition')
def format_nutrition(value):
    if not value:
        return "No nutrition data available"
    try:
        if isinstance(value, str):
            nutrition_data = json.loads(value)
        else:
            nutrition_data = value
        
        formatted = []
        for key, value in nutrition_data.items():
            # Replace underscores with spaces and capitalize each word
            formatted_key = ' '.join(word.capitalize() for word in key.split('_'))
            # Format the value with appropriate units
            if key in ['calories', 'protein', 'carbs', 'fiber', 'sugars', 'fat']:
                formatted_value = f"{value}g"
            elif key in ['vitamin_c', 'iron', 'calcium', 'potassium']:
                formatted_value = f"{value}mg"
            else:
                formatted_value = str(value)
            formatted.append(f'<div class="nutrition-item"><span class="nutrition-key">{formatted_key}</span><span class="nutrition-value">{formatted_value}</span></div>')
        return '\n'.join(formatted)
    except (json.JSONDecodeError, AttributeError):
        return "Invalid nutrition data format"

@app.template_filter('json_decode')
def json_decode(value):
    """Safely decode JSON data."""
    if not value:
        return None
    
    if isinstance(value, dict):
        return value
        
    if isinstance(value, str):
        try:
            return json.loads(value)
        except json.JSONDecodeError:
            try:
                # Try to clean the string if it's double-encoded
                cleaned = value.strip('"\'')
                return json.loads(cleaned)
            except json.JSONDecodeError:
                return None
    return None

db.init_app(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

@app.route('/')
def index():
    return redirect(url_for('home'))

@app.route('/home')
# @login_required
def home():
    return render_template('home.html')

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg'}
@app.route('/scan', methods=['GET', 'POST'])
def scan():
    if request.method == 'POST':
        # Require login to process image
        if not current_user.is_authenticated:
            flash("Please log in to analyze images.")
            return redirect(url_for('login'))

        file = request.files.get('image')
        if not file or file.filename == '':
            flash('No file selected.')
            return render_template('scan.html', result=None)
        
        if not allowed_file(file.filename):
            flash('Allowed file types: png, jpg, jpeg.')
            return render_template('scan.html', result=None)

        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Create result object with default structure
        result = type('Result', (), {
            'image_filename': filename,
            'date': datetime.now(),
            'fruit_name': '',
            'status': '',
            'nutrition': {},
            'synergic_fruits': '',
            'analysis': ''
        })()

        try:
            # Analyze with Lllama
            Lllama = LllamaHealthAnalyzer()
            analysis = Lllama.analyze_image(filepath)
            result.fruit_name = analysis.get('item', '') if analysis else ''
            result.status = analysis.get('status', '') if analysis else ''

            # Nutrition with USDA
            usda = USDAClient()
            result.nutrition = usda.get_nutrition(result.fruit_name) or {}

            # Synergic fruit recommendation
            user_data = {
                'weight': current_user.weight,
                'height': current_user.height,
                'diet_plan': current_user.diet_goal,
                'diet_type': current_user.diet_type,
                'age': current_user.age,
                'region': request.form.get('region', 'India'),
                'allergies': current_user.allergies,
                'activity_level': current_user.activity_level,
                'gender': current_user.gender,
                'current_fruit': result.fruit_name
            }

            deepseek = DeepSeekRecommender()
            result.synergic_fruits = deepseek.generate_recommendations(user_data)

            # Markdown-style summary
            result.analysis = f"**{result.fruit_name}**\n\n"
            result.analysis += f"Date: {result.date.strftime('%Y-%m-%d %H:%M')}\n\n"
            result.analysis += f"Status: {result.status}\n\n"

            # Save to DB
            scan = ScanHistory(
                user_id=current_user.id,
                image_filename=filename,
                fruit_name=result.fruit_name,
                health_status=result.status,
                nutrition=json.dumps(result.nutrition),
                synergic_fruits=result.synergic_fruits
            )
            db.session.add(scan)
            db.session.commit()

        except Exception as e:
            print(f"Error processing scan: {e}")
            flash('Error processing the scan. Please try again.')
            return render_template('scan.html', result=None)

        return render_template('scan.html', result=result)

    # GET request
    return render_template('scan.html', result=None)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
        else:
            flash('Invalid username or password')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        height = request.form['height']
        weight = request.form['weight']
        age = request.form['age']
        diet_goal = request.form['diet_goal']
        diet_type = request.form['diet_type']
        gender = request.form['gender']
        activity_level = request.form['activity_level']
        allergies = request.form['allergies']
        if User.query.filter_by(username=username).first():
            flash('Username already exists')
            return render_template('register.html')
        user = User(
            username=username,
            password=generate_password_hash(password),
            height=height,
            weight=weight,
            age=age,
            diet_goal=diet_goal,
            diet_type=diet_type,
            gender=gender,
            activity_level=activity_level,
            allergies=allergies
        )
        db.session.add(user)
        db.session.commit()
        login_user(user)
        return redirect(url_for('home'))
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    user = current_user
    if request.method == 'POST':
        user.height = request.form['height']
        user.weight = request.form['weight']
        user.age = request.form['age']
        user.diet_goal = request.form['diet_goal']
        user.diet_type = request.form['diet_type']
        user.gender = request.form['gender']
        user.activity_level = request.form['activity_level']
        user.allergies = request.form['allergies']
        db.session.commit()
        flash('Profile updated!')
    return render_template('profile.html', user=user)

@app.route('/history', methods=['GET'])
@login_required
def history():
    scans = ScanHistory.query.filter_by(user_id=current_user.id).order_by(ScanHistory.date.desc()).all()
    return render_template('history.html', scans=scans)

@app.route('/history/delete/<int:scan_id>', methods=['POST'])
@login_required
def delete_scan(scan_id):
    scan = ScanHistory.query.filter_by(id=scan_id, user_id=current_user.id).first()
    if scan:
        db.session.delete(scan)
        db.session.commit()
        flash('Scan deleted.')
    return redirect(url_for('history'))

@app.route('/about')
def about():
    return render_template('about.html')

# TODO: Register blueprints for auth, scan, history, profile, about

with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(host = '0.0.0.0',port=5000,debug=True) 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\copy_utils.py -----
import os

# Root directory to start searching from
ROOT_DIR = r"D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner"

# File extensions to include
INCLUDE_EXTENSIONS = {'.py', '.js', '.css', '.html', '.txt'}

# Output file where combined code will be saved
OUTPUT_FILE = os.path.join(ROOT_DIR, "all_code_snippets.txt")

def should_include(file_name):
    return os.path.splitext(file_name)[1] in INCLUDE_EXTENSIONS

def copy_code_snippets():
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as outfile:
        for dirpath, _, filenames in os.walk(ROOT_DIR):
            for filename in filenames:
                if should_include(filename):
                    file_path = os.path.join(dirpath, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            outfile.write(f"\n\n----- File: {file_path} -----\n")
                            outfile.write(content)
                    except Exception as e:
                        print(f"Could not read {file_path}: {e}")

    print(f"\n✅ Code snippets copied to: {OUTPUT_FILE}")

if __name__ == "__main__":
    copy_code_snippets()


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\models.py -----
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime

db = SQLAlchemy()

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    height = db.Column(db.Float, nullable=True)
    weight = db.Column(db.Float, nullable=True)
    age = db.Column(db.Integer, nullable=True)
    diet_goal = db.Column(db.String(100), nullable=True)
    diet_type = db.Column(db.String(50), nullable=True)
    gender = db.Column(db.String(20), nullable=True)
    activity_level = db.Column(db.String(50), nullable=True)
    allergies = db.Column(db.String(200), nullable=True)
    scans = db.relationship('ScanHistory', backref='user', lazy=True)

class ScanHistory(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    image_filename = db.Column(db.String(200), nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    fruit_name = db.Column(db.String(100), nullable=True)
    health_status = db.Column(db.String(50), nullable=True)
    nutrition = db.Column(db.Text, nullable=True)  # JSON string
    recommendations = db.Column(db.Text, nullable=True)
    synergic_fruits = db.Column(db.Text, nullable=True) 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\requirements.txt -----
alembic==1.15.2
blinker==1.9.0
certifi==2025.4.26
charset-normalizer==3.4.1
click==8.1.8
colorama==0.4.6
Flask==2.3.2
Flask-JWT-Extended==4.7.1
Flask-Login==0.6.3
Flask-Migrate==4.1.0
Flask-SQLAlchemy==3.1.1
greenlet==3.2.1
idna==3.10
itsdangerous==2.2.0
Jinja2==3.1.6
Mako==1.3.10
Markdown==3.5.2
MarkupSafe==3.0.2
pillow==10.2.0
psycopg2-binary==2.9.10
PyJWT==2.10.1
python-dotenv==1.0.0
requests==2.31.0
SQLAlchemy==2.0.40
typing_extensions==4.13.2
urllib3==2.4.0
Werkzeug==2.3.7
gunicorn

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\services\deepseek_service.py -----
import requests
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class DeepSeekRecommender:
    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('OPENROUTER_API_KEY')
        if not self.api_key:
            raise ValueError("OPENROUTER_API_KEY not found in environment variables")
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        self.timeout=20

    def generate_recommendations(self, user_data):
        prompt = f"""
I am {user_data['weight']} kg, my height is {user_data['height']} feet, my diet plan is {user_data['diet_plan']},I am a {user_data['diet_type']}, I am from India, My gender is {user_data['gender']}, I am {user_data['age']} years old.
I am currently eating {user_data['current_fruit']}.
Based on the present season, my locality, BMI, and diet plan,
Tell me 5 fruits I should eat to complete my nutrient level and follow my diet chart.
Just give names and reasons—nothing else.
I know the nutrient value of {user_data['current_fruit']}, so skip that but explain how it's beneficial and any precautions.

Keep it concise.
Example:
1. **Fruit Name**: 
    - **Reason for recommendation**: Why this fruit is recommended.
    - **Precautions**: Any precautions to take while consuming this fruit.
    - **Benefits**: Benefits of this fruit.
--------------------------------------------------------------
2. **Fruit Name**:
    - **Reason for recommendation**: Why this fruit is recommended.
    - **Precautions**: Any precautions to take while consuming this fruit.
    - **Benefits**: Benefits of this fruit.
---------------------------------------------------------------

.....simillary recommend 5 fruits.
---------------------------------------------------------------
Then:
**Benefits of {user_data['current_fruit']}**:
**Precautions of {user_data['current_fruit']}**:

Give all the answers in english only.
"""
        try:
            response = requests.post(
                url=self.base_url,
                headers=self.headers,
                json={
                    "model": "deepseek/deepseek-r1:free",
                    "messages": [{"role": "user", "content": prompt}]
                }
            )
            response.raise_for_status()
            data = response.json()
            
            # Check if the response has the expected structure
            if 'choices' not in data or not data['choices']:
                return "No recommendations available at the moment."
            
            content = data['choices'][0].get('message', {}).get('content', '')
            if not content:
                return "No recommendations available at the moment."
                
            return content
            
        except requests.exceptions.RequestException as e:
            print(f"API Request Error: {str(e)}")
            return "Sorry for incovinience, free trials have exhausted, trials will be refereshed at 5:00 AM. Unable to generate recommendations at the moment."
        except (KeyError, ValueError, AttributeError) as e:
            print(f"Response Parsing Error: {str(e)}")
            return "Error processing recommendations."
        except Exception as e:
            print(f"Unexpected Error: {str(e)}")
            return "An unexpected error occurred while generating recommendations." 


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\services\llama_service.py -----
import base64
import requests
import json
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class LllamaHealthAnalyzer:
    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('Lllama_KEY')
        if not self.api_key:
            raise ValueError("Lllama_KEY not found in environment variables")
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://freshcheck-pro.com",
            "X-Title": "FreshCheck Pro"
        }
        self.timeout = 30
    def analyze_image(self, image_path):
        try:
            with open(image_path, "rb") as f:
                b64_image = base64.b64encode(f.read()).decode("utf-8")

            prompt = """You are a produce quality analyzer. Analyze the image and return ONLY a valid JSON object with the following structure:
{
    "item": "name of the produce",
    "type": "fruit/vegetable/herb",
    "status": "fresh/rotten/uncertain",
    "confidence": 0.0-1.0,
    "issues": ["list", "of", "problems"],
    "storage_tips": "string"
}

Do not include any additional text or explanation. Only return the JSON object."""

            payload = {
                "model": "meta-llama/llama-4-maverick:free",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{b64_image}"}}
                        ]
                    }
                ]
            }

            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            return self._parse_response(response.json())

        except Exception as e:
            print(f"Lllama API Error: {str(e)}")
            return {
                "error": f"Lllama API Error: {str(e)}",
                "item": "Sorry for incovinience, free trials have exhausted, trials will be refereshed at 5:00 AM. Unable to identify the item at the moment.",
                "type": "Unknown",
                "status": "uncertain",
                "confidence": 0.0,
                "issues": ["API Error"],
                "storage_tips": "Unable to analyze due to technical issues"
            }

    def _parse_response(self, response):
        try:
            content = response["choices"][0]["message"]["content"]
            # Try to find JSON in the response
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            if start_idx == -1 or end_idx == 0:
                raise ValueError("No JSON object found in response")
            
            json_str = content[start_idx:end_idx]
            result = json.loads(json_str)
            
            # Validate required fields
            required_fields = ["item", "type", "status", "confidence", "issues", "storage_tips"]
            for field in required_fields:
                if field not in result:
                    raise ValueError(f"Missing required field: {field}")
            
            return result
            
        except Exception as e:
            print(f"Response Parsing Error: {str(e)}")
            return {
                "error": f"Failed to parse response: {str(e)}",
                "item": "Unknown",
                "type": "Unknown",
                "status": "uncertain",
                "confidence": 0.0,
                "issues": ["Parsing Error"],
                "storage_tips": "Unable to analyze due to technical issues"
            } 


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\services\usda_service.py -----
import requests
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class USDAClient:
    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('USDA_KEY')
        if not self.api_key:
            raise ValueError("USDA_KEY not found in environment variables")
        self.nutrient_map = {
            "calories": ("Energy (kcal)", 1008),
            "protein": ("Protein", 1003),
            "carbs": ("Carbohydrate, by difference", 1005),
            "fiber": ("Fiber, total dietary", 1079),
            "sugars": ("Sugars, total including NLEA", 2000),
            "fat": ("Total lipid (fat)", 1004),
            "vitamin_c": ("Vitamin C, total ascorbic acid", 1162),
            "iron": ("Iron, Fe", 1089),
            "calcium": ("Calcium, Ca", 1087),
            "potassium": ("Potassium, K", 1092)
        }

    def get_nutrition(self, food_name):
        try:
            if not food_name:
                return None

            params = {
                "api_key": self.api_key,
                "query": food_name,
                "pageSize": 1,
                "dataType": ["Survey (FNDDS)"]
            }

            response = requests.get(
                "https://api.nal.usda.gov/fdc/v1/foods/search",
                params=params,
                timeout=10
            )
            response.raise_for_status()

            if not response.json().get("foods"):
                return None

            return self._extract_nutrients(response.json()["foods"][0])

        except Exception as e:
            print(f"Nutrition API Error: {str(e)}")
            return None

    def _extract_nutrients(self, food_data):
        nutrients = food_data.get("foodNutrients", [])
        return {
            key: next(
                (n["value"] for n in nutrients if n["nutrientId"] == self.nutrient_map[key][1]),
                0.0
            )
            for key in self.nutrient_map
        } 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\static\css\style.css -----
* {
    margin: 0;
    padding: -20px;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    background-color: #f5f5f5;
    color: #000000;
}

.container {
    max-width: 700px;
    margin: 2rem auto;
    padding: -10rem;
}

:root {
    --primary-color: #2e7d32;
    --secondary-color: #ff8f00;
    --white: #ffffff;
    --dark-gray: #333333;
    --hover-bg: #f5f5f5;
}

body {
    margin: 10px;
    padding: -10px;
    font-family: 'Poppins', sans-serif;
}

/* Navbar Styles */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0rem 4rem; /* Added more left-right padding */
    background-color: var(--white);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 999;
}

/* Brand name */
.nav-brand {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary-color);
}

/* Menu list */
.nav-menu {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 1.8rem;
}

/* Menu links */
.nav-menu li a {
    text-decoration: none;
    color: var(--dark-gray);
    font-weight: 600;
    padding: 0.5rem 1.2rem;
    border-radius: 30px;
    transition: all 0.3s ease;
}

/* Hover effect */
.nav-menu li a:hover {
    background-color: var(--hover-bg);
    color: var(--primary-color);
}

/* Logout button special style */
.logout-btn {
    background-color: var(--secondary-color);
    color: var(--white);
    padding: 0.5rem 1.5rem;
    border-radius: 30px;
    transition: background-color 0.3s ease;
}

.logout-btn:hover {
    background-color: #ff9800;
}

/* Responsive for Mobile */
@media (max-width: 768px) {
    .navbar {
        padding: 1rem 2rem; /* Less padding on smaller screens */
    }

    .nav-menu {
        flex-direction: column;
        background-color: var(--white);
        position: absolute;
        top: 70px;
        right: 20px;
        width: 200px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        display: none;
    }
    
    .navbar.active .nav-menu {
        display: flex;
    }
}


h1 {
    text-align: center;
    margin-bottom: 2rem;
    color: #2c3e50;
}

.scan-options {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.option-tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.tab-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    background-color: #e9ecef;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
}

.tab-btn.active {
    background-color: #007bff;
    color: white;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.file-input-wrapper {
    text-align: center;
}

.file-input {
    display: none;
}

.file-label {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #28a745;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.file-label:hover {
    background-color: #218838;
}

.file-name {
    display: block;
    margin-top: 0.5rem;
    color: #6c757d;
}

.camera-wrapper {
    text-align: center;
}

#video {
    width: 100%;
    max-width: 640px;
    margin: 0 auto;
    border-radius: 8px;
}

.preview-wrapper {
    margin: 1rem 0;
}

#preview {
    max-width: 100%;
    border-radius: 8px;
}

.camera-controls {
    margin-top: 1rem;
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
}

#startCamera {
    background-color: #007bff;
    color: white;
}

#startCamera:hover {
    background-color: #0056b3;
}

#takePicture {
    background-color: #28a745;
    color: white;
}

#takePicture:hover {
    background-color: #218838;
}

#retakePicture {
    background-color: #dc3545;
    color: white;
}

#retakePicture:hover {
    background-color: #c82333;
}

.submit-btn {
    display: block;
    width: 100%;
    background-color: #007bff;
    color: white;
    margin-top: 1rem;
}

.submit-btn:hover {
    background-color: #0056b3;
}

#result-block {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    margin-top: 2rem;
}

#result-block h2 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.recommendations {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    margin-top: 2rem;
}

.recommendations h3 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.recommendations-list {
    display: grid;
    gap: 1rem;
}

@media (max-width: 600px) {
    .container {
        margin: 1rem;
        padding: 0.5rem;
    }

    .option-tabs {
        flex-direction: column;
    }

    .camera-controls {
        flex-direction: column;
    }

    .btn {
        width: 100%;
    }
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
}

header {
    background: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    position: sticky;
    top: 0;
    z-index: 100;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.logo a {
    font-size: 2rem;
    font-weight: bold;
    color: #2e7d32;
    text-decoration: none;
}
.logo span {
    color: #ff9800;
}
.nav-links {
    list-style: none;
    display: flex;
    gap: 1.5rem;
    margin: 0;
    padding: 0;
}
.nav-links a {
    text-decoration: none;
    color: #222;
    font-weight: 500;
    transition: color 0.2s;
}
.nav-links a:hover {
    color: #2e7d32;
}

.hero {
    background: linear-gradient(rgba(255,255,255,0.9), #f1f8e9), url('https://images.unsplash.com/photo-1530836369250-ef72a3f5cda8?auto=format&fit=crop&w=2070&q=80');
    background-size: cover;
    background-position: center;
    padding: 5rem 1rem 3rem 1rem;
    text-align: center;
}
.hero-content {
    max-width: 600px;
    margin: 0 auto;
}
.hero h1 {
    font-size: 2.5rem;
    color: #1b5e20;
    margin-bottom: 1rem;
}
.hero h1 span {
    color: #ff9800;
}
.hero p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
}
.scan-btn {
    background: #2e7d32;
    color: #fff;
    padding: 0.9rem 2rem;
    border-radius: 30px;
    font-weight: 600;
    text-decoration: none;
    font-size: 1.1rem;
    transition: background 0.2s, transform 0.2s;
    display: inline-block;
}
.scan-btn:hover {
    background: #1b5e20;
    transform: translateY(-2px);
}

.features {
    background: #fff;
    padding: 3rem 1rem;
    text-align: center;
}
.features h2 {
    color: #1b5e20;
    font-size: 2rem;
    margin-bottom: 2rem;
}
.features-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    justify-content: center;
}
.feature-card {
    background: #f1f8e9;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.07);
    padding: 2rem 1.5rem;
    max-width: 320px;
    flex: 1 1 250px;
    min-width: 220px;
}
.feature-card h3 {
    color: #2e7d32;
    margin-bottom: 0.7rem;
}
.feature-card p {
    color: #333;
    font-size: 1rem;
}

@media (max-width: 700px) {
    .navbar {
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
    }
    .features-grid {
        flex-direction: column;
        gap: 1.5rem;
    }
    .hero h1 {
        font-size: 1.7rem;
    }
}

.scan-section {
    max-width: 1200px;
    margin: 2rem auto;
    background: #fff;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.07);
    padding: 2rem 2rem;
    text-align: center;
}
.scan-section h2 {
    color: #2e7d32;
    margin-bottom: 1.5rem;
    background: linear-gradient(120deg, #f1f8e9 0%, #ffffff 100%);
    padding: 3rem 2rem;
    border-radius: 18px;
    box-shadow: 0 8px 24px rgba(44, 62, 80, 0.08);
}
.scan-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    margin-bottom: 2rem;
}
.scan-form input[type="file"] {
    border: 1px solid #81c784;
    border-radius: 8px;
    padding: 0.5rem;
    background: #f1f8e9;
    width: 100%;
    max-width: 300px;
}
.scan-result {
    margin-top: 2rem;
    background: #f1f8e9;
    border-radius: 12px;
    padding: 1.5rem 1rem;
    box-shadow: 0 2px 8px rgba(44, 62, 80, 0.05);
}
.scan-preview {
    width: 100%;
    max-width: 220px;
    border-radius: 10px;
    margin-bottom: 1rem;
    box-shadow: 0 2px 8px rgba(44, 62, 80, 0.08);
}
.result-block {
    text-align: left;
    margin-bottom: 1.2rem;
    background: #fff;
    border-radius: 8px;
    padding: 0.7rem 1rem;
    box-shadow: 0 1px 4px rgba(44, 62, 80, 0.04);
}
.result-block h4 {
    color: #2e7d32;
    margin-bottom: 0.3rem;
}
.result-block pre {
    font-size: 0.98rem;
    color: #333;
    background: none;
    border: none;
    margin: 0;
    padding: 0;
    white-space: pre-wrap;
    word-break: break-word;
}

.recommendations {
    margin-top: 1.5rem;
    background: #fff;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(44, 62, 80, 0.05);
}

.recommendations h3 {
    color: #2e7d32;
    margin-bottom: 1rem;
    text-align: center;
}

.recommendations-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.recommendation-item {
    background: #f1f8e9;
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.recommendation-icon {
    width: 40px;
    height: 40px;
    background: #2e7d32;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
}

.recommendation-text {
    flex: 1;
    font-size: 0.98rem;
    color: #333;
}

.auth-section {
    max-width: 400px;
    margin: 2rem auto;
    background: #fff;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.07);
    padding: 2rem 1.5rem;
    text-align: center;
}
.auth-section h2 {
    color: #2e7d32;
    margin-bottom: 1.5rem;
}
.auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: stretch;
    margin-bottom: 1rem;
}
.auth-form input,
.auth-form select {
    border: 1px solid #81c784;
    border-radius: 8px;
    padding: 0.7rem 1rem;
    background: #f1f8e9;
    font-size: 1rem;
}
.auth-form input:focus,
.auth-form select:focus {
    outline: none;
    border-color: #2e7d32;
}
.auth-link {
    margin-top: 1rem;
    font-size: 0.98rem;
}
.auth-link a {
    color: #2e7d32;
    text-decoration: underline;
}

.history-section {
    max-width: 1200px;
    margin: 2rem auto;
    background: #fff;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.07);
    padding: 2rem 2rem;
}
.history-section h2 {
    color: #2e7d32;
    margin-bottom: 1.5rem;
    text-align: center;
}
.history-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}
.history-card {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 2rem;
    background: #fff;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
@media (min-width: 600px) {
    .history-card {
        flex-direction: row;
        align-items: flex-start;
    }
}
.history-img {
    width: 120px;
    height: 120px;
    object-fit: cover;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(44, 62, 80, 0.08);
}
.history-info {
    display: grid;
    gap: 1.2rem;
}
.history-info > div {
    background: #f8faf8;
    padding: 1rem;
    border-radius: 8px;
}
.history-info b {
    color: #2e7d32;
    display: block;
    margin-bottom: 0.5rem;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid #e8f5e9;
}
.history-actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-end;
}
.delete-btn {
    background: #ff5252;
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 0.5rem 1.2rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
}
.delete-btn:hover {
    background: #d32f2f;
}

.about-section {
    max-width: 600px;
    margin: 2rem auto;
    background: #fff;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.07);
    padding: 2rem 1.5rem;
    text-align: center;
}
.about-section h2 {
    color: #2e7d32;
    margin-bottom: 1.2rem;
}
.about-section p {
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
}
.about-features {
    list-style: none;
    padding: 0;
    margin: 0 0 1.5rem 0;
    text-align: left;
}
.about-features li {
    font-size: 1.05rem;
    margin-bottom: 0.7rem;
    padding-left: 1.2rem;
    position: relative;
}
.about-team h3 {
    color: #1b5e20;
    margin-bottom: 0.5rem;
}
.about-team a {
    color: #2e7d32;
    text-decoration: underline;
}

/* Mobile Responsive Styles */
@media (max-width: 768px) {
    .navbar {
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
    }
    
    .nav-links {
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    
    .hero {
        padding: 3rem 1rem 2rem 1rem;
    }
    
    .hero h1 {
        font-size: 1.8rem;
    }
    
    .hero p {
        font-size: 1rem;
    }
    
    .scan-btn {
        padding: 0.8rem 1.5rem;
        font-size: 1rem;
    }
    
    .features-grid {
        flex-direction: column;
        gap: 1.5rem;
        padding: 0 1rem;
    }
    
    .feature-card {
        width: 100%;
        max-width: none;
    }
    
    .scan-section {
        margin: 1.5rem;
        padding: 1.5rem 1rem;
    }
    
    .scan-form input[type="file"] {
        width: 100%;
    }
    
    .scan-preview {
        max-width: 100%;
    }
    
    .auth-section {
        margin: 1.5rem;
        padding: 1.5rem 1rem;
    }
    
    .history-section {
        margin: 1.5rem;
        padding: 1.5rem 1rem;
    }
    
    .history-card {
        flex-direction: column;
    }
    
    .history-img {
        width: 100%;
        height: auto;
        max-height: 200px;
    }
    
    .history-info {
        padding: 1rem 0;
    }
    
    .history-actions {
        align-items: center;
    }
}

/* Small Mobile Devices */
@media (max-width: 480px) {
    .hero h1 {
        font-size: 1.5rem;
    }
    
    .hero p {
        font-size: 0.9rem;
    }
    
    .scan-btn {
        padding: 0.7rem 1.2rem;
        font-size: 0.9rem;
    }
    
    .feature-card {
        padding: 1.5rem 1rem;
    }
    
    .feature-card h3 {
        font-size: 1.1rem;
    }
    
    .feature-card p {
        font-size: 0.9rem;
    }
    
    .scan-section h2,
    .auth-section h2,
    .history-section h2,
    .about-section h2 {
        font-size: 1.3rem;
    }
    
    .result-block pre,
    .history-info pre {
        font-size: 0.9rem;
    }
}

/* Landscape Mode for Mobile */
@media (max-height: 500px) and (orientation: landscape) {
    .hero {
        padding: 2rem 1rem;
    }
    
    .scan-section,
    .auth-section,
    .history-section,
    .about-section {
        margin: 1rem auto;
        padding: 1rem;
    }
    
    .history-card {
        flex-direction: row;
    }
    
    .history-img {
        width: 100px;
        height: 100px;
    }
}

.formatted-text {
    font-family: 'Poppins', Arial, sans-serif;
    font-size: 0.98rem;
    color: #333;
    line-height: 1.6;
}

.formatted-text strong {
    color: #2e7d32;
    font-weight: 600;
}

.formatted-text em {
    color: #555;
    font-style: italic;
}

.formatted-text p {
    margin: 0.8rem 0;
}

.formatted-text p:first-child {
    margin-top: 0;
}

.formatted-text p:last-child {
    margin-bottom: 0;
}

.synergic-box .formatted-text {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
}

.synergic-box .formatted-text p {
    background: #f8faf8;
    padding: 1rem;
    border-radius: 8px;
    margin: 0;
}

.synergic-box .formatted-text p:has(em) {
    border-left: 3px solid #2e7d32;
}

.synergic-box .formatted-text p:has(strong) {
    font-size: 1.1rem;
    background: #fff;
    border-bottom: 2px solid #e8f5e9;
}

/* Nutrition specific styles */
.formatted-text .nutrition-item {
    display: flex;
    justify-content: space-between;
    padding: 0.3rem 0;
    border-bottom: 1px solid #e0e0e0;
}

.formatted-text .nutrition-item:last-child {
    border-bottom: none;
}

.formatted-text .nutrition-key {
    font-weight: 600;
    color: #2e7d32;
}

.formatted-text .nutrition-value {
    color: #333;
}

/* Result boxes styling */
.result-header-box {
    background: #fff;
    border-radius: 12px;
    padding: 1.2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    border-left: 4px solid #2e7d32;
}

.meta-item {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.meta-item:last-child {
    margin-bottom: 0;
}

.meta-label {
    font-weight: 600;
    color: #2e7d32;
    width: 80px;
}

.meta-value {
    color: #333;
}

.nutrition-box {
    background: #fff;
    border-radius: 12px;
    padding: 1.2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.nutrition-box h4 {
    color: #2e7d32;
    margin: 0 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e8f5e9;
}

.nutrition-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
}

.nutrition-item {
    background: #f8faf8;
    padding: 0.8rem;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.nutrition-item .label {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
}

.nutrition-item .value {
    color: #2e7d32;
    font-weight: 600;
    font-size: 1.1rem;
}

.synergic-box {
    background: #fff;
    border-radius: 12px;
    padding: 1.2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.synergic-box h4 {
    color: #2e7d32;
    margin: 0 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e8f5e9;
}

.synergic-item {
    background: #f8faf8;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
}

.synergic-item:last-child {
    margin-bottom: 0;
}

.synergic-item h5 {
    color: #2e7d32;
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
}

.reason {
    color: #555;
    margin-bottom: 0.5rem;
    line-height: 1.4;
}

.precaution {
    color: #d32f2f;
    font-size: 0.9rem;
    padding: 0.8rem;
    background: #fff3f3;
    border-radius: 6px;
    border-left: 3px solid #ff5252;
}

.fruit-note-box {
    background: #f1f8e9;
    border-radius: 12px;
    padding: 1.2rem;
    margin-top: 1.5rem;
    border-left: 4px solid #2e7d32;
}

.fruit-note-box h4 {
    color: #2e7d32;
    margin: 0 0 0.8rem 0;
}

.fruit-note-box p {
    color: #333;
    line-height: 1.5;
    margin: 0;
}

/* History card improvements */
.history-card {
    background: #fff;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.history-info {
    display: grid;
    gap: 1.2rem;
}

.history-info > div {
    background: #f8faf8;
    padding: 1rem;
    border-radius: 8px;
}

.history-info b {
    color: #2e7d32;
    display: block;
    margin-bottom: 0.5rem;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid #e8f5e9;
}

/* Scan options styling */
.scan-options {
    max-width: 600px;
    margin: 0 auto 2rem;
}

.option-tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    justify-content: center;
}

.tab-btn {
    padding: 0.8rem 1.5rem;
    border: none;
    background: #f1f8e9;
    color: #2e7d32;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

.tab-btn:hover {
    background: #e8f5e9;
}

.tab-btn.active {
    background: #2e7d32;
    color: #fff;
}

.tab-content {
    display: none;
    margin-bottom: 1.5rem;
}

.tab-content.active {
    display: block;
}

/* File input styling */
.file-input-wrapper {
    text-align: center;
    margin-bottom: 1.5rem;
}

.file-input {
    display: none;
}

.file-label {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    background: #f1f8e9;
    border: 2px dashed #2e7d32;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
}

.file-label:hover {
    background: #e8f5e9;
}

.file-label .icon {
    font-size: 1.5rem;
}

.file-name {
    display: block;
    margin-top: 0.5rem;
    color: #666;
    font-size: 0.9rem;
}

/* Camera interface styling */
.camera-wrapper {
    max-width: 100%;
    margin: 0 auto;
    text-align: center;
}

#video {
    width: 100%;
    max-width: 500px;
    border-radius: 8px;
    margin-bottom: 1rem;
    display: none;
}

.camera-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 1rem;
}

.camera-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.5rem;
    background: #2e7d32;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

.camera-btn:hover {
    background: #1b5e20;
}

.camera-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.camera-btn .icon {
    font-size: 1.2rem;
}

.preview-wrapper {
    max-width: 500px;
    margin: 0 auto;
}

#preview {
    width: 100%;
    border-radius: 8px;
    margin-bottom: 1rem;
} 
/* Add at the bottom */
.menu-toggle {
    display: none;
    font-size: 1.8rem;
    cursor: pointer;
    color: var(--primary-color);
}

@media (max-width: 768px) {
    .menu-toggle {
        display: block;
    }

    .nav-menu {
        display: none;
        flex-direction: column;
        position: absolute;
        right: 1.5rem;
        top: 60px;
        background-color: white;
        padding: 1rem;
        border-radius: 12px;
        box-shadow: var(--shadow-md);
    }

    .nav-menu.active {
        display: flex;
    }
}

@media (max-width: 768px) {
    .nav-links {
        transition: max-height 0.3s ease-in-out;
        overflow: hidden;
        max-height: 0;
        flex-direction: column;
        width: 100%;
        text-align: center;
    }

    .nav-links.active {
        max-height: 500px;
    }

    .menu-toggle {
        display: block;
        font-size: 2rem;
        cursor: pointer;
        color: var(--primary-color);
        margin-top: 0.5rem;
    }
}

.page-bg {
    background: url('/static/images/julia-zolotova-M_xIaxQE3Ms-unsplash.jpg') no-repeat center center fixed;
    background-size: cover;
    padding: 3rem 1rem;
    min-height: 100vh;
}

/* Add optional dark overlay if needed for readability */
.page-bg::before {
    content: '';
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(255,255,255,0.6); /* light overlay */
    z-index: -1;
}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\static\js\scan.js -----
document.addEventListener('DOMContentLoaded', function() {
    // Tab switching functionality
    const tabs = document.querySelectorAll('.tab-btn');
    const contents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active class from all tabs and contents
            tabs.forEach(t => t.classList.remove('active'));
            contents.forEach(c => c.classList.remove('active'));

            // Add active class to clicked tab and corresponding content
            tab.classList.add('active');
            const target = document.querySelector(tab.dataset.target);
            target.classList.add('active');

            // If switching to camera tab, start the camera
            if (tab.dataset.target === '#camera-tab') {
                // Small delay to allow DOM update
                setTimeout(startCamera, 50);
            } else {
                stopVideoStream();
            }
        });
    });

    // File input handling
    const fileInput = document.querySelector('.file-input');
    const fileName = document.querySelector('.file-name');

    fileInput.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            fileName.textContent = this.files[0].name;
            // Preview the selected image
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('preview').src = e.target.result;
                document.querySelector('.preview-wrapper').style.display = 'block';
            };
            reader.readAsDataURL(this.files[0]);
        } else {
            fileName.textContent = 'No file selected';
        }
    });

    // Camera functionality
    let stream = null;
    const video = document.getElementById('video');
    const canvas = document.createElement('canvas');
    const startCameraBtn = document.getElementById('startCamera');
    const takePictureBtn = document.getElementById('takePicture');
    const retakePictureBtn = document.getElementById('retakePicture');

    // Start camera stream
    async function startCamera() {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: 'environment' // Remove resolution constraints for compatibility
                } 
            });
            video.srcObject = stream;
            video.style.display = 'block';

            // Wait for video metadata to ensure valid dimensions
            await new Promise((resolve, reject) => {
                video.onloadedmetadata = () => {
                    video.play().then(resolve).catch(reject);
                };
            });

            startCameraBtn.style.display = 'none';
            takePictureBtn.style.display = 'inline-flex';
            document.querySelector('.preview-wrapper').style.display = 'none';
        } catch (err) {
            console.error('Camera Error:', err);
            let message = 'Error accessing camera. ';
            if (err.name === 'NotAllowedError') {
                message += 'Please check browser permissions.';
            } else {
                message += err.message;
            }
            alert(message);
        }
    }

    // Stop video stream
    function stopVideoStream() {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
            stream = null;
            video.style.display = 'none';
            startCameraBtn.style.display = 'inline-flex';
            takePictureBtn.style.display = 'none';
        }
    }

    // Take picture from video stream
    function takePicture() {
        // Set canvas dimensions to match video
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        // Draw video frame to canvas
        canvas.getContext('2d').drawImage(video, 0, 0);
        
        // Convert canvas to blob
        canvas.toBlob(blob => {
            // Create a File object
            const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });
            
            // Create a FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            
            // Set the file input's files
            fileInput.files = dataTransfer.files;
            
            // Update preview
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('preview').src = e.target.result;
            };
            reader.readAsDataURL(file);
            
            // Show preview and retake button
            document.querySelector('.preview-wrapper').style.display = 'block';
            retakePictureBtn.style.display = 'inline-flex';
            
            // Hide video and take picture button
            video.style.display = 'none';
            takePictureBtn.style.display = 'none';
            
            // Stop the stream
            stopVideoStream();
        }, 'image/jpeg', 0.8);
    }

    // Event listeners for camera buttons
    startCameraBtn.addEventListener('click', startCamera);
    takePictureBtn.addEventListener('click', takePicture);
    retakePictureBtn.addEventListener('click', () => {
        document.querySelector('.preview-wrapper').style.display = 'none';
        retakePictureBtn.style.display = 'none';
        startCamera();
    });
}); 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\static\js\script.js -----
function displayRecommendations(recommendations) {
    const recommendationsList = document.getElementById('recommendationsList');
    recommendationsList.innerHTML = '';
    
    recommendations.forEach(rec => {
        const item = document.createElement('div');
        item.className = 'recommendation-item';
        
        const icon = document.createElement('div');
        icon.className = 'recommendation-icon';
        icon.innerHTML = rec.icon || '💡';
        
        const text = document.createElement('div');
        text.className = 'recommendation-text';
        text.textContent = rec.text;
        
        item.appendChild(icon);
        item.appendChild(text);
        recommendationsList.appendChild(item);
    });
}

function displayResult(result) {
    const resultText = document.getElementById('resultText');
    const recommendations = document.getElementById('recommendations');
    
    resultText.textContent = result.text;
    if (result.recommendations) {
        displayRecommendations(result.recommendations);
        recommendations.style.display = 'block';
    } else {
        recommendations.style.display = 'none';
    }
}

// DOM Elements
const fileTab = document.getElementById('fileTab');
const cameraTab = document.getElementById('cameraTab');
const fileContent = document.getElementById('fileContent');
const cameraContent = document.getElementById('cameraContent');
const fileInput = document.getElementById('fileInput');
const fileName = document.getElementById('fileName');
const video = document.getElementById('video');
const preview = document.getElementById('preview');
const startCameraBtn = document.getElementById('startCamera');
const takePictureBtn = document.getElementById('takePicture');
const retakePictureBtn = document.getElementById('retakePicture');
const scanForm = document.getElementById('scanForm');

let stream = null;

// Tab switching functionality
fileTab.addEventListener('click', () => {
    fileTab.classList.add('active');
    cameraTab.classList.remove('active');
    fileContent.classList.add('active');
    cameraContent.classList.remove('active');
    stopCamera();
});

cameraTab.addEventListener('click', () => {
    cameraTab.classList.add('active');
    fileTab.classList.remove('active');
    cameraContent.classList.add('active');
    fileContent.classList.remove('active');
});

// File input handling
fileInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
        fileName.textContent = e.target.files[0].name;
    } else {
        fileName.textContent = 'No file selected';
    }
});

// Camera functionality
async function startCamera() {
    try {
        stream = await navigator.mediaDevices.getUserMedia({
            video: {
                facingMode: 'environment'
            }
        });
        video.srcObject = stream;
        video.style.display = 'block';
        preview.style.display = 'none';
        startCameraBtn.style.display = 'none';
        takePictureBtn.style.display = 'inline-block';
        retakePictureBtn.style.display = 'none';
    } catch (err) {
        console.error('Error accessing camera:', err);
        alert('Error accessing camera. Please make sure you have granted camera permissions.');
    }
}

function stopCamera() {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
    }
    video.srcObject = null;
}

function takePicture() {
    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext('2d').drawImage(video, 0, 0);
    
    preview.src = canvas.toDataURL('image/jpeg');
    preview.style.display = 'block';
    video.style.display = 'none';
    takePictureBtn.style.display = 'none';
    retakePictureBtn.style.display = 'inline-block';
    
    // Create a blob from the canvas data
    canvas.toBlob((blob) => {
        const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
        fileName.textContent = 'camera-capture.jpg';
    }, 'image/jpeg');
}

function retakePicture() {
    video.style.display = 'block';
    preview.style.display = 'none';
    takePictureBtn.style.display = 'inline-block';
    retakePictureBtn.style.display = 'none';
    fileInput.value = '';
    fileName.textContent = 'No file selected';
}

// Event listeners for camera controls
startCameraBtn.addEventListener('click', startCamera);
takePictureBtn.addEventListener('click', takePicture);
retakePictureBtn.addEventListener('click', retakePicture);

// Form submission
scanForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(scanForm);
    
    try {
        const response = await fetch('/scan', {
            method: 'POST',
            body: formData
        });
        
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        
        const data = await response.json();
        
        // Update results
        const resultBlock = document.getElementById('result-block');
        resultBlock.innerHTML = `
            <h2>Scan Results</h2>
            <pre>${JSON.stringify(data, null, 2)}</pre>
        `;
        
        // Update recommendations if available
        if (data.recommendations) {
            const recommendationsList = document.getElementById('recommendationsList');
            recommendationsList.innerHTML = data.recommendations
                .map(rec => `<div class="recommendation-item">${rec}</div>`)
                .join('');
        }
        
    } catch (error) {
        console.error('Error:', error);
        alert('Error processing the receipt. Please try again.');
    }
});

// Initialize UI
takePictureBtn.style.display = 'none';
retakePictureBtn.style.display = 'none';
preview.style.display = 'none'; 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\about.html -----
{% extends 'base.html' %}
{% block title %}About | GreenScan{% endblock %}

{% block content %}
<style>
    /* About Page Styles */
    :root {
        --primary: #2e7d32;
        --primary-light: #60ad5e;
        --primary-dark: #1b5e20;
        --secondary: #ff8f00;
        --secondary-light: #ffc046;
        --secondary-dark: #c56000;
        --white: #ffffff;
        --light-gray: rgba(248, 249, 250, 0.9);
        --medium-gray: #e9ecef;
        --dark-gray: #212529;
        --text-gray: #495057;
        --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);
        --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
        --shadow-lg: 0 10px 25px rgba(0,0,0,0.2);
        --transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
        --border-radius: 16px;
        --section-padding: 8rem 2rem;
        --glass-effect: backdrop-filter: blur(10px) saturate(180%);
    }

    /* Background Design */
    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(46, 125, 50, 0.15) 0%, rgba(255, 143, 0, 0.1) 100%), 
                    url('https://images.unsplash.com/photo-1534710961216-75c88202f43e?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        z-index: -1;
    }

    /* About Hero Section */
    .about-hero {
        background: linear-gradient(135deg, rgba(30, 81, 40, 0.9) 0%, rgba(255, 143, 0, 0.8) 100%);
        color: var(--white);
        padding: var(--section-padding);
        text-align: center;
        position: relative;
        margin-bottom: 4rem;
        clip-path: ellipse(100% 100% at 50% 0%);
    }

    .about-hero::after {
        content: '';
        position: absolute;
        bottom: -50px;
        left: 0;
        right: 0;
        height: 100px;
        background: var(--light-gray);
        clip-path: ellipse(75% 100% at 50% 100%);
    }

    .about-hero h1 {
        font-size: clamp(2.5rem, 5vw, 4rem);
        margin-bottom: 1.5rem;
        text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        line-height: 1.2;
        background: linear-gradient(to right, #fff 0%, #ffc046 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .about-hero p {
        font-size: clamp(1.1rem, 2vw, 1.4rem);
        max-width: 800px;
        margin: 0 auto 2rem;
        opacity: 0.9;
        text-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }

    /* About Content Section */
    .about-section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem 6rem;
    }

    .about-intro {
        text-align: center;
        margin-bottom: 5rem;
        background: rgba(255, 255, 255, 0.85);
        padding: 3rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-lg);
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .about-intro h2 {
        font-size: clamp(1.8rem, 3vw, 2.8rem);
        margin-bottom: 1.5rem;
        position: relative;
        display: inline-block;
        color: var(--primary-dark);
    }

    .about-intro h2::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 4px;
        background: var(--secondary);
        border-radius: 2px;
    }

    .about-intro p {
        font-size: 1.15rem;
        color: var(--text-gray);
        line-height: 1.7;
        max-width: 800px;
        margin: 0 auto;
    }

    /* Features Grid - Glassmorphism Style */
    .about-features {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2.5rem;
        margin: 5rem 0;
    }

    .feature-card {
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--border-radius);
        padding: 2.5rem;
        box-shadow: var(--shadow-lg);
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(10px);
        position: relative;
        overflow: hidden;
    }

    .feature-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 5px;
        background: linear-gradient(90deg, var(--primary-light), var(--secondary-light));
    }

    .feature-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        background: rgba(255, 255, 255, 0.95);
    }

    .feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1.5rem;
        background: linear-gradient(135deg, var(--primary-light) 0%, var(--secondary-light) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
        transition: var(--transition);
    }

    .feature-card:hover .feature-icon {
        transform: rotate(15deg) scale(1.2);
    }

    .feature-card h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: var(--primary-dark);
    }

    .feature-card p {
        color: var(--text-gray);
        line-height: 1.7;
    }

    /* Team Section - Gradient Background */
    .about-team {
        background: linear-gradient(135deg, rgba(46, 125, 50, 0.1) 0%, rgba(255, 143, 0, 0.1) 100%);
        border-radius: var(--border-radius);
        padding: 5rem 2rem;
        text-align: center;
        margin: 6rem 0;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(5px);
    }

    .about-team::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd' opacity='0.05'%3E%3Cg fill='%232e7d32' fill-opacity='0.4'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    }

    .team-content {
        position: relative;
        z-index: 1;
        max-width: 1000px;
        margin: 0 auto;
    }

    .about-team h2 {
        font-size: clamp(1.8rem, 3vw, 2.8rem);
        margin-bottom: 1.5rem;
        color: var(--primary);
        background: linear-gradient(to right, var(--primary-dark) 0%, var(--secondary-dark) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
    }

    .about-team p {
        font-size: 1.15rem;
        color: var(--text-gray);
        line-height: 1.7;
        margin-bottom: 2rem;
    }

    .team-members {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 2rem;
        margin-top: 3rem;
    }

    .team-member {
        background: rgba(255, 255, 255, 0.9);
        border-radius: var(--border-radius);
        padding: 2rem;
        width: 280px;
        box-shadow: var(--shadow-md);
        transition: var(--transition);
        border: 1px solid rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(5px);
    }

    .team-member:hover {
        transform: translateY(-10px) scale(1.03);
        box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        background: rgba(255, 255, 255, 1);
    }

    .member-avatar {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        object-fit: cover;
        margin: 0 auto 1.5rem;
        border: 4px solid rgba(255, 255, 255, 0.8);
        box-shadow: 0 8px 25px rgba(46, 125, 50, 0.2);
        transition: var(--transition);
    }

    .team-member:hover .member-avatar {
        transform: scale(1.05);
        box-shadow: 0 10px 30px rgba(46, 125, 50, 0.3);
    }

    .member-info h3 {
        font-size: 1.4rem;
        margin-bottom: 0.5rem;
        color: var(--primary-dark);
    }

    .member-info p {
        font-size: 0.95rem;
        color: var(--text-gray);
        margin-bottom: 1rem;
    }

    .member-contact {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .contact-link {
        color: var(--primary);
        transition: var(--transition);
        font-size: 1.2rem;
    }

    .contact-link:hover {
        color: var(--secondary);
        transform: translateY(-3px);
    }

    .cta-contact {
        margin-top: 4rem;
    }

    .cta-contact a {
        display: inline-flex;
        align-items: center;
        padding: 1.2rem 3rem;
        background: linear-gradient(135deg, var(--secondary) 0%, var(--secondary-dark) 100%);
        color: var(--white);
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        transition: var(--transition);
        box-shadow: 0 5px 20px rgba(255, 143, 0, 0.4);
        border: none;
        font-size: 1.1rem;
        position: relative;
        overflow: hidden;
    }

    .cta-contact a::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(rgba(255,255,255,0.2), rgba(255,255,255,0));
        opacity: 0;
        transition: var(--transition);
    }

    .cta-contact a:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(255, 143, 0, 0.5);
    }

    .cta-contact a:hover::after {
        opacity: 1;
    }

    .cta-contact .btn-icon {
        margin-right: 12px;
        font-size: 1.3em;
        transition: var(--transition);
    }

    .cta-contact a:hover .btn-icon {
        transform: translateX(5px);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .about-hero {
            clip-path: ellipse(120% 100% at 50% 0%);
        }
    }

    @media (max-width: 768px) {
        .about-features {
            grid-template-columns: 1fr;
        }

        .team-members {
            flex-direction: column;
            align-items: center;
        }

        .team-member {
            width: 100%;
            max-width: 350px;
        }

        .about-intro {
            padding: 2rem;
        }
    }

    @media (max-width: 576px) {
        :root {
            --section-padding: 6rem 1.5rem;
        }

        .about-hero {
            clip-path: ellipse(150% 100% at 50% 0%);
        }

        .feature-card {
            padding: 2rem 1.5rem;
        }
    }
</style>

<!-- About Hero Section -->
<section class="about-hero">
    <h1>Our Green Revolution</h1>
    <p>Harnessing AI to bridge the gap between technology and nature for healthier living and sustainable consumption</p>
</section>

<!-- About Content Section -->
<div class="about-section">
    <div class="about-intro">
        <h2>About GreenScan</h2>
        <p>GreenScan combines cutting-edge artificial intelligence with agricultural science to provide instant analysis of your plants and produce. Our mission is to empower individuals with knowledge about their food's freshness, nutritional value, and optimal usage.</p>
    </div>

    <!-- Features Grid -->
    <div class="about-features">
        <div class="feature-card">
            <div class="feature-icon">🌱</div>
            <h3>Advanced Plant Diagnostics</h3>
            <p>Our proprietary algorithms detect early signs of disease, nutrient deficiencies, and growth issues with laboratory-grade accuracy using just your smartphone camera.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🍎</div>
            <h3>Nutrition Intelligence</h3>
            <p>Access comprehensive nutritional profiles including vitamins, minerals, and antioxidants based on the specific variety and ripeness of your scanned items.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🤖</div>
            <h3>AI-Powered Insights</h3>
            <p>Receive personalized recommendations for storage, preparation, and consumption tailored to each item's unique characteristics and your dietary preferences.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">📱</div>
            <h3>Intuitive Interface</h3>
            <p>Designed for effortless use with real-time scanning feedback, instant results, and easy-to-understand visual reports.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🔒</div>
            <h3>Enterprise Security</h3>
            <p>Your data is protected with military-grade encryption, biometric authentication, and strict privacy controls that exceed industry standards.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🌍</div>
            <h3>Sustainability Focus</h3>
            <p>We're committed to reducing global food waste by helping users maximize the usage and shelf life of their produce.</p>
        </div>
    </div>

    <!-- Team Section -->
    <div class="about-team">
        <div class="team-content">
            <h2>Meet Our Experts</h2>
            <p>Our interdisciplinary team combines decades of experience in artificial intelligence, plant science, and nutritional research to deliver accurate, actionable insights.</p>
            
            <div class="team-members">
                <div class="team-member">
                    <img src="https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Dr. Sarah Chen" class="member-avatar">
                    <div class="member-info">
                        <h3>Dr. Sarah Chen</h3>
                        <p>Chief Scientist</p>
                        <p>PhD in Plant Pathology, Cornell</p>
                        <div class="member-contact">
                            <a href="#" class="contact-link">LinkedIn</a>
                            <a href="#" class="contact-link">Twitter</a>
                        </div>
                    </div>
                </div>
                <div class="team-member">
                    <img src="https://images.unsplash.com/photo-1566492031773-4f4e44671857?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Michael Rodriguez" class="member-avatar">
                    <div class="member-info">
                        <h3>Michael Rodriguez</h3>
                        <p>Lead Developer</p>
                        <p>AI & Computer Vision Specialist</p>
                        <div class="member-contact">
                            <a href="#" class="contact-link">GitHub</a>
                            <a href="#" class="contact-link">Medium</a>
                        </div>
                    </div>
                </div>
                <div class="team-member">
                    <img src="https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Priya Kapoor" class="member-avatar">
                    <div class="member-info">
                        <h3>Priya Kapoor</h3>
                        <p>Nutrition Director</p>
                        <p>Registered Dietitian, RD</p>
                        <div class="member-contact">
                            <a href="#" class="contact-link">Research</a>
                            <a href="#" class="contact-link">Instagram</a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="cta-contact">
                <a href="mailto:info@greenscan.com">
                    <span class="btn-icon">✉️</span> Contact Our Team
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    // Animation for feature cards on scroll
    document.addEventListener('DOMContentLoaded', function() {
        const featureCards = document.querySelectorAll('.feature-card');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    entry.target.style.transitionDelay = `${index * 0.1}s`;
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1
        });

        featureCards.forEach(card => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';
            card.style.transition = 'all 0.6s cubic-bezier(0.25, 0.8, 0.25, 1)';
            observer.observe(card);
        });
    });
</script>
{% endblock %}

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\base.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}GreenScan{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <a href="/">Green<span>Scan</span></a>
            </div>

            <!-- Mobile toggle icon -->
            <div class="menu-toggle" onclick="toggleMenu()">☰</div>

            <ul class="nav-links" id="navMenu">
                <li><a href="/">Home</a></li>
                <li><a href="/scan">Scan</a></li>
                <li><a href="/history">History</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/about">About</a></li>
                {% if current_user.is_authenticated %}
                <li><a href="/logout" class="logout-btn">Logout</a></li>
                {% else %}
                <li><a href="/login">Login</a></li>
                {% endif %}
            </ul>
        </nav>
    </header>

    <main>
        {% block content %}{% endblock %}
    </main>

    <script>
        function toggleMenu() {
            const nav = document.getElementById('navMenu');
            nav.classList.toggle('active');
        }
    </script>
</body>
</html>


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\history.html -----
{% extends 'base.html' %}
{% block title %}Scan History | GreenScan{% endblock %}
{% block content %}
<div class="page-bg">
    <section class="history-section">
        <h2>Scan History</h2>
        {% if scans %}
            {% for scan in scans %}
            <div class="scan-result">
                <!-- Image -->
                <img src="{{ url_for('static', filename='uploads/' + scan.image_filename) }}" alt="Scan Image" class="scan-preview">

                <!-- Header Info -->
                <div class="result-header-box">
                    <div class="meta-item">
                        <span class="meta-label">Date:</span>
                        <span class="meta-value">{{ scan.date.strftime('%Y-%m-%d %H:%M') }}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">Fruit:</span>
                        <span class="meta-value">{{ scan.fruit_name }}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">Status:</span>
                        <span class="meta-value">{{ scan.health_status }}</span>
                    </div>
                </div>

                <!-- Nutrition Info -->
                <div class="nutrition-box">
                    <h4>Nutrition</h4>
                    <div class="nutrition-grid">
                        {% set nutrition = scan.nutrition|json_decode %}
                        {% if nutrition %}
                            {% for key, value in nutrition.items() %}
                            <div class="nutrition-item">
                                <span class="label">{{ key|replace('_', ' ')|title }}</span>
                                <span class="value">
                                    {% if key == 'calories' %}
                                        {{ value }} kcal
                                    {% elif key in ['protein', 'carbs', 'fiber', 'sugars', 'fat'] %}
                                        {{ value }}g
                                    {% elif key in ['vitamin_c', 'iron', 'calcium', 'potassium'] %}
                                        {{ value }}mg
                                    {% else %}
                                        {{ value }}
                                    {% endif %}
                                </span>
                            </div>
                            {% endfor %}
                        {% else %}
                            <div class="nutrition-item">
                                <span class="label">No nutrition data available</span>
                            </div>
                        {% endif %}
                    </div>
                </div>

                <!-- Synergic Fruits -->
                <div class="synergic-box">
                    <h4>Synergic Fruits</h4>
                    <div class="formatted-text">
                        {{ scan.synergic_fruits|markdown|safe }}
                    </div>
                </div>

                <!-- Delete Button -->
                <div class="history-actions">
                    <form method="POST" action="/history/delete/{{ scan.id }}" style="display:inline;">
                        <button type="submit" class="delete-btn">Delete</button>
                    </form>
                </div>
            </div>
            {% endfor %}
        {% else %}
            <p>No scans yet.</p>
        {% endif %}
    </section>
</div>
{% endblock %}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\home.html -----
{% extends 'base.html' %}
{% block title %}Home | GreenScan{% endblock %}

{% block content %}
<style>
    :root {
        --primary: #8f8f8f;
        --primary-light: #4c4d4c;
        --primary-dark: #646464;
        --secondary: #ff8f00;
        --secondary-light: #ffc046;
        --secondary-dark: #c56000;
        --white: #ffffff;
        --light-gray: #f8f9fa;
        --medium-gray: #e9ecef;
        --dark-gray: #212529;
        --text-gray: #808c98;
        --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);
        --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
        --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        --border-radius: 12px;
        --section-padding: 8rem 2rem;
    }
    
    /* Base Styles */
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        line-height: 1.6;
        color: var(--text-gray);
        overflow-x: hidden;
    }
    
    h1, h2, h3, h4 {
        font-weight: 700;
        line-height: 1.2;
        color: var(--dark-gray);
        margin-top: 0;
    }
    
    p {
        margin-top: 0;
        margin-bottom: 1.5rem;
    }
    
    /* Hero Section */
    .hero {
        background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), 
                    url('static/images/Airbrush-Image-Enhancer.jpeg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        color: var(--white);
        padding: var(--section-padding);
        text-align: center;
        min-height: 90vh;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }
    
    .hero::after {
        content: '';
        position: absolute;
        bottom: -50px;
        left: 0;
        right: 0;
        height: 100px;
        background: var(--light-gray);
        clip-path: ellipse(75% 100% at 50% 100%);
        z-index: 1;
    }
    
    .hero-content {
        max-width: 900px;
        margin: 0 auto;
        position: relative;
        z-index: 2;
        animation: fadeInUp 0.8s ease;
        padding: 0 2rem;
    }
    
    .hero h1 {
        font-size: clamp(4.5rem, 5vw, 4rem);
        margin-bottom: 2.5rem;
        text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        line-height: 1.1;
    }
    
    .hero h1 span {
        color: var(--secondary-light);
        position: relative;
        display: inline-block;
    }
    
    .hero h1 span::after {
        content: '';
        position: absolute;
        bottom: 8px;
        left: 0;
        width: 100%;
        height: 12px;
        background: rgba(255, 192, 70, 0.3);
        z-index: -1;
        border-radius: 4px;
        transform: skewX(-15deg);
    }
    
    .hero p {
        font-size: clamp(1.1rem, 2vw, 1.4rem);
        margin-bottom: 3rem;
        opacity: 0.9;
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .btn-group {
        display: flex;
        gap: 1.5rem;
        justify-content: center;
        flex-wrap: wrap;
        margin-top: 2rem;
    }
    
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 1rem 2.5rem;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        font-size: 1.1rem;
        transition: var(--transition);
        border: none;
        cursor: pointer;
        box-shadow: var(--shadow-sm);
        position: relative;
        overflow: hidden;
    }
    
    .btn::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(rgba(255,255,255,0.1), rgba(255,255,255,0));
        opacity: 0;
        transition: var(--transition);
    }
    
    .btn:hover::after {
        opacity: 1;
    }
    
    .btn-primary {
        background-color: var(--secondary);
        color: var(--white);
        box-shadow: 0 4px 20px rgba(255, 143, 0, 0.4);
    }
    
    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 143, 0, 0.5);
        background-color: var(--secondary-light);
    }
    
    .btn-secondary {
        background-color: rgba(255,255,255,0.1);
        color: var(--white);
        border: 2px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(5px);
    }
    
    .btn-secondary:hover {
        background-color: rgba(255,255,255,0.2);
        border-color: rgba(255, 255, 255, 0.5);
        transform: translateY(-3px);
    }
    
    .btn-icon {
        margin-right: 10px;
        font-size: 1.2em;
        transition: var(--transition);
    }
    
    .btn:hover .btn-icon {
        transform: translateX(3px);
    }
    
    /* Section Styles */
    .section {
        padding: var(--section-padding);
        position: relative;
    }
    
    .section-header {
        text-align: center;
        margin-bottom: 5rem;
        position: relative;
    }
    
    .section-header h2 {
        font-size: clamp(1.8rem, 3vw, 2.8rem);
        margin-bottom: 1.5rem;
        position: relative;
        display: inline-block;
    }
    
    .section-header h2::after {
        content: '';
        position: absolute;
        bottom: -15px;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 4px;
        background: var(--secondary);
        border-radius: 2px;
    }
    
    .section-header p {
        max-width: 700px;
        margin: 0 auto;
        font-size: 1.15rem;
        color: var(--text-gray);
        line-height: 1.7;
    }
    
    /* Features Section */
    .features {
        background-color: var(--light-gray);
        position: relative;
    }
    
    .features::before {
        content: '';
        position: absolute;
        top: -50px;
        left: 0;
        right: 0;
        height: 100px;
        background: var(--light-gray);
        clip-path: ellipse(75% 100% at 50% 0%);
    }
    
    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 3rem;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .feature-card {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 3rem 2rem;
        text-align: center;
        box-shadow: var(--shadow-sm);
        transition: var(--transition);
        border: 1px solid var(--medium-gray);
        position: relative;
        overflow: hidden;
    }
    
    .feature-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 5px;
        background: linear-gradient(90deg, var(--primary-light), var(--secondary-light));
    }
    
    .feature-card:hover {
        transform: translateY(-10px);
        box-shadow: var(--shadow-lg);
        border-color: transparent;
    }
    
    .feature-card h3 {
        color: var(--primary);
        font-size: 1.5rem;
        margin-bottom: 1.25rem;
    }
    
    .feature-icon {
        width: 90px;
        height: 90px;
        background: linear-gradient(135deg, var(--primary-light) 0%, var(--primary) 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.5rem;
        color: var(--white);
        font-size: 2.5rem;
        box-shadow: 0 8px 20px rgba(46, 125, 50, 0.2);
        transition: var(--transition);
    }
    
    .feature-card:hover .feature-icon {
        transform: rotate(10deg) scale(1.1);
        box-shadow: 0 10px 25px rgba(46, 125, 50, 0.3);
    }
    
    /* Stats Section */
    .stats {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
        color: var(--white);
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .stats::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd' opacity='0.05'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    }
    
    .stats-container {
        max-width: 1200px;
        margin: 0 auto;
        position: relative;
        z-index: 1;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 3rem;
        margin-top: 4rem;
    }
    
    .stat-item {
        padding: 2rem;
        position: relative;
    }
    
    .stat-item::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background: var(--secondary-light);
        border-radius: 3px;
    }
    
    .stat-number {
        font-size: clamp(2.5rem, 5vw, 3.5rem);
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: var(--secondary-light);
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .stat-number span {
        font-size: 1.5rem;
        margin-left: 0.2rem;
    }
    
    .stat-label {
        font-size: 1.2rem;
        opacity: 0.9;
        font-weight: 500;
    }
    
    /* Scan Types Section */
    .scan-types {
        background-color: var(--white);
        position: relative;
    }
    
    .scan-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2.5rem;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .scan-card {
        position: relative;
        border-radius: var(--border-radius);
        overflow: hidden;
        height: 400px;
        box-shadow: var(--shadow-md);
        transition: var(--transition);
    }
    
    .scan-card:hover {
        transform: translateY(-10px);
        box-shadow: var(--shadow-lg);
    }
    
    .scan-card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.8s ease;
    }
    
    .scan-card:hover img {
        transform: scale(1.1);
    }
    
    .scan-card-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        padding: 2.5rem 2rem;
        color: var(--white);
        transform: translateY(0);
        transition: var(--transition);
    }
    
    .scan-card:hover .scan-card-overlay {
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
    }
    
    .scan-card-overlay h3 {
        font-size: 1.8rem;
        margin-bottom: 0.8rem;
        transform: translateY(20px);
        transition: var(--transition);
        opacity: 0;
    }
    
    .scan-card-overlay p {
        transform: translateY(20px);
        transition: var(--transition);
        opacity: 0;
        transition-delay: 0.05s;
        margin-bottom: 0;
    }
    
    .scan-card:hover .scan-card-overlay h3,
    .scan-card:hover .scan-card-overlay p {
        transform: translateY(0);
        opacity: 1;
    }
    
    /* Testimonials */
    .testimonials {
        background-color: var(--light-gray);
        position: relative;
    }
    
    .testimonials::before {
        content: '';
        position: absolute;
        top: -50px;
        left: 0;
        right: 0;
        height: 100px;
        background: var(--light-gray);
        clip-path: ellipse(75% 100% at 50% 0%);
    }
    
    .testimonial-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 3rem;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .testimonial-card {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 2.5rem;
        box-shadow: var(--shadow-sm);
        position: relative;
        transition: var(--transition);
    }
    
    .testimonial-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-md);
    }
    
    .testimonial-card::before {
        content: '"';
        position: absolute;
        top: 20px;
        left: 20px;
        font-size: 6rem;
        color: var(--primary-light);
        opacity: 0.1;
        font-family: serif;
        line-height: 1;
        z-index: 0;
    }
    
    .testimonial-content {
        margin-bottom: 2rem;
        font-style: italic;
        color: var(--text-gray);
        position: relative;
        z-index: 1;
        font-size: 1.1rem;
        line-height: 1.7;
    }
    
    .testimonial-author {
        display: flex;
        align-items: center;
    }
    
    .author-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 1.5rem;
        border: 3px solid var(--primary-light);
    }
    
    .author-info h4 {
        margin-bottom: 0.3rem;
        font-size: 1.2rem;
        color: var(--dark-gray);
    }
    
    .author-info p {
        font-size: 0.95rem;
        color: var(--text-gray);
        opacity: 0.8;
        margin-bottom: 0;
    }
    
    /* CTA Section */
    .cta {
        background: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), 
                    url('https://images.unsplash.com/photo-1542838132-92c53300491e?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');
        background-size: cover;
        background-position: center;
        color: var(--white);
        text-align: center;
        position: relative;
        padding: 8rem 2rem;
    }
    
    .cta .section-header h2 {
        color: var(--white);
    }
    
    .cta .section-header h2::after {
        background: var(--secondary-light);
    }
    
    .cta .section-header p {
        color: rgba(255,255,255,0.9);
    }
    
    .cta-btn {
        padding: 1.3rem 3.5rem;
        font-size: 1.2rem;
        border-radius: 50px;
        background: var(--secondary);
        color: var(--white);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        font-weight: 600;
        transition: var(--transition);
        box-shadow: 0 5px 20px rgba(255, 143, 0, 0.4);
        border: none;
        cursor: pointer;
        margin-top: 1.5rem;
    }
    
    .cta-btn:hover {
        transform: translateY(-3px) scale(1.03);
        box-shadow: 0 8px 30px rgba(255, 143, 0, 0.5);
        background-color: var(--secondary-light);
    }
    
    .cta-btn .btn-icon {
        margin-right: 12px;
        font-size: 1.3em;
    }
    
    /* Floating Animation */
    @keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
        100% { transform: translateY(0px); }
    }
    
    .floating {
        animation: float 6s ease-in-out infinite;
    }
    
    /* Animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-delay-1 {
        animation-delay: 0.2s;
    }
    
    .animate-delay-2 {
        animation-delay: 0.4s;
    }
    
    /* Responsive Design */
    @media (max-width: 1200px) {
        :root {
            --section-padding: 7rem 2rem;
        }
    }
    
    @media (max-width: 992px) {
        :root {
            --section-padding: 6rem 2rem;
        }
        
        .hero {
            min-height: 80vh;
            background-attachment: scroll;
        }
        
        .features-grid, .scan-grid, .testimonial-grid {
            gap: 2rem;
        }
    }
    
    @media (max-width: 768px) {
        :root {
            --section-padding: 5rem 1.5rem;
        }
        
        .hero {
            min-height: 70vh;
        }
        
        .btn-group {
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }
        
        .btn {
            width: 100%;
            max-width: 300px;
        }
        
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @media (max-width: 576px) {
        :root {
            --section-padding: 4rem 1rem;
        }
        
        .hero {
            min-height: 60vh;
        }
        
        .section-header {
            margin-bottom: 3rem;
        }
        
        .feature-card, .testimonial-card {
            padding: 2rem 1.5rem;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
            gap: 2rem;
        }
        
        .scan-card {
            height: 350px;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero">
    <div class="hero-content">
        <h1>Smart Scan for <span>Fruits & Vegetables</span></h1>
        <p>Our advanced AI technology instantly analyzes freshness, detects diseases, and provides optimal storage recommendations for your produce with 95% accuracy.</p>
        <div class="btn-group">
            <a href="/scan" class="btn btn-primary">
                <span class="btn-icon">📸</span> Start Scanning
            </a>
            <a href="#features" class="btn btn-secondary">
                <span class="btn-icon">🔍</span> Learn More
            </a>
        </div>
    </div>
</section>

<!-- User Greeting Section -->
<section class="user-greeting section" 
    style = "
            background-color: #c7fcc7;
            border-radius: 16px;
            padding: 1.5rem;
            margin: 1.5rem auto;
            max-width: 900px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
            text-align: center;
            font-family: 'Segoe UI', sans-serif;
            color: #573b2c;
        ">

  <div class="container" style="text-align: center; margin-top: 1.5rem;">
    {% if current_user.is_authenticated %}
      <p style="font-size: 1.2rem;">
        Welcome back, <strong>{{ current_user.username }}</strong>! 🎉
      </p>
      <div class="btn-group">
        <p>
            <a href="{{ url_for('profile') }}" class="btn btn-primary"style="background-color: #ffab64;" >Go to Profile </a>
            |
            <a href="{{ url_for('logout') }}" class="btn btn-outline">Logout</a>
        </p>
    </div>
    {% else %}
      <p style="font-size: 1.2rem;color:#fe8523;">
        Welcome to <strong>GreenSathi</strong>! 🚀 Please
        <a href="{{ url_for('login') }}">log in</a> or
        <a href="{{ url_for('register') }}">register</a> to access personalized features.
      </p>
    {% endif %}
  </div>
</section>

<!-- Features Section -->
<section class="features section" id="features">
    <div class="section-header">
        <h2>Why Choose GreenScan?</h2>
        <p>Revolutionizing the way you interact with your food and plants through cutting-edge technology</p>
    </div>
    
    <div class="features-grid">
        <div class="feature-card animate__animated animate__fadeInUp animate-delay-1">
            <div class="feature-icon floating">🌿</div>
            <h3>Plant Health Analysis</h3>
            <p>Get detailed reports on your plant's health status, including potential diseases and nutrient deficiencies with our industry-leading accuracy.</p>
        </div>
        <div class="feature-card animate__animated animate__fadeInUp">
            <div class="feature-icon floating">🍎</div>
            <h3>Freshness Detection</h3>
            <p>Instantly determine if your fruits and vegetables are fresh, ripe, or spoiled using our patented image recognition technology.</p>
        </div>
        <div class="feature-card animate__animated animate__fadeInUp animate-delay-2">
            <div class="feature-icon floating">💡</div>
            <h3>Smart Recommendations</h3>
            <p>Receive personalized care tips, storage advice, and usage suggestions tailored to each item you scan.</p>
        </div>
    </div>
</section>

<!-- Stats Section -->
<section class="stats section">
    <div class="stats-container">
        <div class="section-header">
            <h2>Trusted by Thousands</h2>
            <p>Join our growing community of health-conscious users</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">95<span>%</span></div>
                <div class="stat-label">Accuracy Rate</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">50K<span>+</span></div>
                <div class="stat-label">Happy Users</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">1M<span>+</span></div>
                <div class="stat-label">Scans Per Month</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">24<span>/7</span></div>
                <div class="stat-label">Support Available</div>
            </div>
        </div>
    </div>
</section>

<!-- Scan Types Section -->
<section class="scan-types section">
    <div class="section-header">
        <h2>What You Can Scan</h2>
        <p>Discover the range of produce and plants our technology can analyze</p>
    </div>
    
    <div class="scan-grid">
        <div class="scan-card">
            <img src="https://images.unsplash.com/photo-1573246123716-6b1782bfc499?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Fresh Fruits" loading="lazy">
            <div class="scan-card-overlay">
                <h3>Fresh Fruits</h3>
                <p>Check ripeness, quality, and optimal consumption time</p>
            </div>
        </div>
        <div class="scan-card">
            <img src="static/images/new bg image.jpg">
            <div class="scan-card-overlay">
                <h3>Vegetables</h3>
                <p>Detect freshness and maximize shelf life</p>
            </div>
        </div>
        <div class="scan-card">
            <img src="https://images.unsplash.com/photo-1485955900006-10f4d324d411?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="House Plants" loading="lazy">
            <div class="scan-card-overlay">
                <h3>House Plants</h3>
                <p>Identify diseases and care needs instantly</p>
            </div>
        </div>
    </div>
</section>

<!-- Testimonials Section -->
<section class="testimonials section">
    <div class="section-header">
        <h2>What Our Users Say</h2>
        <p>Hear from people who transformed their food and plant care with GreenScan</p>
    </div>
    
    <div class="testimonial-grid">
        <div class="testimonial-card">
            <div class="testimonial-content">
                <p>"GreenScan saved my avocado tree! It detected a nutrient deficiency I would have never noticed. Two weeks after following the recommendations, my tree is thriving again."</p>
            </div>
            <div class="testimonial-author">
                <img src="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Sarah J." class="author-avatar" loading="lazy">
                <div class="author-info">
                    <h4>Sarah J.</h4>
                    <p>Urban Gardener</p>
                </div>
            </div>
        </div>
        
        <div class="testimonial-card">
            <div class="testimonial-content">
                <p>"As a restaurant owner, food waste was a constant challenge. GreenScan helps me manage inventory better, saving us hundreds each week on produce."</p>
            </div>
            <div class="testimonial-author">
                <img src="https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Michael T." class="author-avatar" loading="lazy">
                <div class="author-info">
                    <h4>Michael T.</h4>
                    <p>Restaurant Owner</p>
                </div>
            </div>
        </div>
        
        <div class="testimonial-card">
            <div class="testimonial-content">
                <p>"I love how easy it is to check if fruits are ripe before buying. No more guessing at the supermarket! The storage tips have also made my produce last longer."</p>
            </div>
            <div class="testimonial-author">
                <img src="https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80" alt="Priya K." class="author-avatar" loading="lazy">
                <div class="author-info">
                    <h4>Priya K.</h4>
                    <p>Health Enthusiast</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- CTA Section -->
<section class="cta">
    <div class="section-header">
        <h2>Ready to Transform Your Food Experience?</h2>
        <p>Join thousands of users who are making smarter decisions about their produce and plants</p>
    </div>
    <a href="/scan" class="cta-btn">
        <span class="btn-icon">🚀</span> Get Started Now
    </a>
</section>

<script>
    // Simple animation trigger on scroll
    document.addEventListener('DOMContentLoaded', function() {
        const animateElements = document.querySelectorAll('.feature-card, .stat-item, .scan-card, .testimonial-card');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate__animated', 'animate__fadeInUp');
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1
        });
        
        animateElements.forEach(el => {
            observer.observe(el);
        });
    });
</script>

{% endblock %}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\index.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receipt Scanner</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Receipt Scanner</h1>
        
        <div class="scan-options">
            <div class="option-tabs">
                <button class="tab-btn active" data-target="#file-tab">Upload File</button>
                <button class="tab-btn" data-target="#camera-tab">Use Camera</button>
            </div>

            <div class="tab-content active" id="file-tab">
                <div class="file-input-wrapper">
                    <input type="file" class="file-input" accept="image/*" name="file" id="file">
                    <label for="file" class="file-label">Choose a file</label>
                    <span class="file-name">No file selected</span>
                </div>
            </div>

            <div class="tab-content" id="camera-tab">
                <div class="camera-wrapper">
                    <video id="video" autoplay playsinline style="display: none;"></video>
                    <div class="preview-wrapper" style="display: none;">
                        <img id="preview" alt="Preview">
                    </div>
                    <div class="camera-controls">
                        <button id="startCamera" class="btn">Start Camera</button>
                        <button id="takePicture" class="btn" style="display: none;">Take Picture</button>
                        <button id="retakePicture" class="btn" style="display: none;">Retake</button>
                    </div>
                </div>
            </div>
        </div>

        <form action="/scan" method="post" enctype="multipart/form-data" id="scanForm">
            <button type="submit" class="btn submit-btn">Scan Receipt</button>
        </form>

        <div id="result-block" style="display: none;">
            <h2>Scan Results</h2>
            <div id="results"></div>
        </div>

        <div class="recommendations" id="recommendations">
            <h3>Recommendations</h3>
            <div class="recommendations-list" id="recommendationsList">
                <!-- Recommendations will be added here dynamically -->
            </div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/scan.js') }}"></script>
</body>
</html> 

----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\login.html -----
{% extends 'base.html' %}
{% block title %}Login | GreenScan{% endblock %}

{% block content %}
<style>
    .login-bg {
        background: url('/static/images/julia-zolotova-M_xIaxQE3Ms-unsplash.jpg') no-repeat center center fixed;
        background-size: cover;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem 1rem;
    }

    .login-card {
        background: #ffffff;
        padding: 2.5rem 2rem;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
        max-width: 400px;
        width: 100%;
        text-align: center;
    }

    .login-card h2 {
        color: #2e7d32;
        margin-bottom: 1rem;
        font-size: 2rem;
    }

    .login-card p {
        margin-bottom: 2rem;
        color: #555;
        font-size: 1rem;
    }

    .login-card form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .login-card input[type="text"],
    .login-card input[type="password"] {
        padding: 0.8rem 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        background: #f1f8e9;
        font-size: 1rem;
    }

    .login-card input:focus {
        border-color: #4CAF50;
        outline: none;
    }

    .login-card button {
        background: linear-gradient(to right, #2e7d32, #388e3c);
        color: white;
        border: none;
        padding: 0.8rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s ease;
    }

    .login-card button:hover {
        background: #1b5e20;
    }

    .login-card .register-link {
        margin-top: 1rem;
        font-size: 0.95rem;
        color: #555;
    }

    .login-card .register-link a {
        color: #2e7d32;
        font-weight: bold;
        text-decoration: none;
    }

    .login-card .register-link a:hover {
        text-decoration: underline;
    }
</style>

<div class="login-bg">
    <div class="login-card">
        <h2>Welcome Back</h2>
        <p>Login to your GreenScan</p>
        <form method="POST">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
        <div class="register-link">
            Don't have an account? <a href="{{ url_for('register') }}">Register</a>
        </div>
    </div>
</div>
{% endblock %}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\profile.html -----
{% extends 'base.html' %}
{% block title %}Profile | GreenScan{% endblock %}

{% block content %}
<div class="page-bg">
    <style>
        /* Profile Container */
        .profile-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 2rem;
            padding: 2rem;
            max-width: 1200px;
            margin: auto;
            position: relative;
            z-index: 1;
        }

        /* Profile Card */
        .profile-card {
            background: #fff;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            min-width: 280px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        /* Profile Image */
        .profile-img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 1rem;
            border: 3px solid #4CAF50;
        }

        /* Hover Effects for Profile Card */
        .profile-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        /* Edit Profile Card */
        .edit-form-card {
            background: #fff;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            width: 100%;
            max-width: 500px;
        }

        .edit-form-card h2 {
            margin-bottom: 1.5rem;
            text-align: center;
            color: #1b5e20;
        }

        .edit-form-card form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        /* Form Inputs and Selects */
        .edit-form-card input,
        .edit-form-card select {
            padding: 12px 15px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9fff9;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        /* Form Input Focus Effect */
        .edit-form-card input:focus,
        .edit-form-card select:focus {
            border-color: #4CAF50;
            outline: none;
        }

        /* Submit Button */
        .edit-form-card button {
            background: #2e7d32;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s;
        }

        .edit-form-card button:hover {
            background: #1b5e20;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>

    <div class="profile-container">
        <!-- Profile Summary Card -->
        <div class="profile-card">
            <img src="{{ url_for('static', filename='images/download.png') }}" alt="User" class="profile-img">
            <h3>{{ user.username }}</h3>
            <p><strong>Age:</strong> {{ user.age }}</p>
            <p><strong>Gender:</strong> {{ user.gender.title() }}</p>
        </div>

        <!-- Edit Form Card -->
        <div class="edit-form-card">
            <h2>Edit Profile</h2>
            <form method="POST">
                <input type="text" name="username" value="{{ user.username }}" placeholder="Username" required readonly>
                <input type="number" name="height" value="{{ user.height }}" placeholder="Height (cm)" step="0.1" required>
                <input type="number" name="weight" value="{{ user.weight }}" placeholder="Weight (kg)" step="0.1" required>
                <input type="number" name="age" value="{{ user.age }}" placeholder="Age" required>

                <select name="diet_goal" required>
                    <option value="">Diet Goal</option>
                    <option value="health maintain" {% if user.diet_goal=='health maintain' %}selected{% endif %}>Health Maintain</option>
                    <option value="improve health" {% if user.diet_goal=='improve health' %}selected{% endif %}>Improve Health</option>
                    <option value="gain muscle" {% if user.diet_goal=='gain muscle' %}selected{% endif %}>Gain Muscle</option>
                    <option value="weight loss" {% if user.diet_goal=='weight loss' %}selected{% endif %}>Weight Loss</option>
                </select>

                <select name="diet_type" required>
                    <option value="">Diet Type</option>
                    <option value="veg" {% if user.diet_type=='veg' %}selected{% endif %}>Vegetarian</option>
                    <option value="non veg" {% if user.diet_type=='non veg' %}selected{% endif %}>Non-Vegetarian</option>
                    <option value="vegan" {% if user.diet_type=='vegan' %}selected{% endif %}>Vegan</option>
                </select>

                <select name="gender" required>
                    <option value="">Gender</option>
                    <option value="male" {% if user.gender=='male' %}selected{% endif %}>Male</option>
                    <option value="female" {% if user.gender=='female' %}selected{% endif %}>Female</option>
                    <option value="other" {% if user.gender=='other' %}selected{% endif %}>Other</option>
                </select>

                <select name="activity_level" required>
                    <option value="">Activity Level</option>
                    <option value="sedentary" {% if user.activity_level=='sedentary' %}selected{% endif %}>Sedentary</option>
                    <option value="light" {% if user.activity_level=='light' %}selected{% endif %}>Light</option>
                    <option value="moderate" {% if user.activity_level=='moderate' %}selected{% endif %}>Moderate</option>
                    <option value="active" {% if user.activity_level=='active' %}selected{% endif %}>Active</option>
                </select>

                <input type="text" name="allergies" value="{{ user.allergies }}" placeholder="Allergies (comma separated)">
                <button type="submit">Save Changes</button>
            </form>
        </div>
    </div>
</div>
{% endblock %}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\register.html -----
{% extends 'base.html' %}
{% block title %}Register | GreenScan{% endblock %}

{% block content %}
<style>
    .register-bg {
        background: url('/static/images/julia-zolotova-M_xIaxQE3Ms-unsplash.jpg') no-repeat center center fixed;
        background-size: cover;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem 1rem;
    }

    .register-card {
        background: #ffffff;
        padding: 2.5rem 2rem;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
        max-width: 500px;
        width: 100%;
        text-align: center;
    }

    .register-card h2 {
        color: #2e7d32;
        margin-bottom: 1rem;
        font-size: 2rem;
    }

    .register-card p {
        margin-bottom: 2rem;
        color: #555;
        font-size: 1rem;
    }

    .register-card form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .register-card input,
    .register-card select {
        padding: 0.8rem 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        background: #f1f8e9;
        font-size: 1rem;
    }

    .register-card input:focus,
    .register-card select:focus {
        border-color: #4CAF50;
        outline: none;
    }

    .register-card button {
        background: linear-gradient(to right, #2e7d32, #388e3c);
        color: white;
        border: none;
        padding: 0.8rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s ease;
    }

    .register-card button:hover {
        background: #1b5e20;
    }

    .register-card .login-link {
        margin-top: 1rem;
        font-size: 0.95rem;
        color: #555;
    }

    .register-card .login-link a {
        color: #2e7d32;
        font-weight: bold;
        text-decoration: none;
    }

    .register-card .login-link a:hover {
        text-decoration: underline;
    }
</style>

<div class="register-bg">
    <div class="register-card">
        <h2>Create Account</h2>
        <p>Join GreenScan to track and personalize your health</p>
        <form method="POST">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <input type="number" name="height" placeholder="Height (cm)" step="0.1" required>
            <input type="number" name="weight" placeholder="Weight (kg)" step="0.1" required>
            <input type="number" name="age" placeholder="Age" required>

            <select name="diet_goal" required>
                <option value="">Diet Goal</option>
                <option value="health maintain">Health Maintain</option>
                <option value="improve health">Improve Health</option>
                <option value="gain muscle">Gain Muscle</option>
                <option value="weight loss">Weight Loss</option>
            </select>

            <select name="diet_type" required>
                <option value="">Diet Type</option>
                <option value="veg">Vegetarian</option>
                <option value="non veg">Non-Vegetarian</option>
                <option value="vegan">Vegan</option>
            </select>

            <select name="gender" required>
                <option value="">Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
            </select>

            <select name="activity_level" required>
                <option value="">Activity Level</option>
                <option value="sedentary">Sedentary</option>
                <option value="light">Light</option>
                <option value="moderate">Moderate</option>
                <option value="active">Active</option>
            </select>

            <input type="text" name="allergies" placeholder="Allergies (comma separated)">

            <button type="submit">Register</button>
        </form>

        <div class="login-link">
            Already have an account? <a href="{{ url_for('login') }}">Login</a>
        </div>
    </div>
</div>
{% endblock %}


----- File: D:\ML Folders\ml_env\GitHub\GreenSathi\Green-Sathi-Fruit-Vegetable-Health-Scanner\templates\scan.html -----
{% extends 'base.html' %}
{% block title %}Scan | GreenScan{% endblock %}

{% block content %}
<style>
    /* Yellow-Orange Scan Buttons */
    .scan-btn, .tab-btn, .camera-btn {
        background: linear-gradient(to right, #FFA000, #FF8F00);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.4rem;
        margin: 0.3rem;
    }

    .scan-btn:hover, .tab-btn:hover, .camera-btn:hover {
        background: linear-gradient(to right, #FB8C00, #EF6C00);
    }

    .tab-btn.active {
        box-shadow: inset 0 0 0 3px white;
    }

    .file-label {
        background: white;
        border: 2px dashed #FFA000;
        padding: 1rem;
        border-radius: 12px;
        display: inline-block;
        cursor: pointer;
        transition: background 0.3s;
        font-weight: bold;
        color: #FB8C00;
    }

    .file-label:hover {
        background: #FFF3E0;
    }

    .file-input {
        display: none;
    }

    .file-name {
        display: block;
        margin-top: 0.5rem;
        font-size: 0.9rem;
        color: #444;
    }

    .scan-section h2 {
        text-align: center;
        font-size: 1.8rem;
        margin-bottom: 1.5rem;
        color: #2e7d32;
    }

    .scan-form {
        text-align: center;
        margin-top: 1rem;
        padding: 1rem;
    }

    .scan-result {
        margin-top: 2rem;
        background: #ffffffcc;
        padding: 2rem;
        border-radius: 12px;
    }

    .meta-item {
        margin: 0.5rem 0;
    }

    .meta-label {
        font-weight: bold;
    }

    .nutrition-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 1rem;
    }

    .nutrition-item {
        background: #f9fbe7;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .synergic-box .formatted-text {
        margin-top: 1rem;
        padding: 1rem;
        background: #fffde7;
        border-radius: 8px;
        font-size: 0.95rem;
        line-height: 1.5;
    }
</style>

<div class="page-bg">
    <section class="scan-section">
        <h2>Scan a Fruit or Plant</h2>

        <!-- 🔒 Login Warning -->
        {% if not current_user.is_authenticated %}
        <div class="alert alert-warning" style="background: #fff3cd; color: #856404; padding: 1rem; border-radius: 6px; margin-bottom: 1rem; text-align: center;">
            <strong>Note:</strong> You must <a href="{{ url_for('login') }}">log in</a> to analyze images and get recommendations.
        </div>
        {% endif %}

        <!-- Upload/Camera Tabs -->
        <div class="scan-options">
            <div class="option-tabs">
                <button class="tab-btn active" data-target="#upload-tab">📁 Upload Image</button>
                <button class="tab-btn" data-target="#camera-tab">📷 Use Camera</button>
            </div>

            <!-- Upload/Camera Form -->
            <form method="POST" enctype="multipart/form-data" class="scan-form" id="uploadForm">
                <!-- Upload Tab -->
                <div class="tab-content active" id="upload-tab">
                    <div class="file-input-wrapper">
                        <input type="file" name="image" accept="image/*" id="fileInput" class="file-input">
                        <label for="fileInput" class="file-label">
                            <span class="icon">📂</span>
                            <span class="text">Choose a file</span>
                        </label>
                        <span class="file-name" id="fileName">No file chosen</span>
                    </div>
                </div>

                <!-- Camera Tab -->
                <div class="tab-content" id="camera-tab">
                    <div class="camera-wrapper">
                        <video id="video" autoplay playsinline style="display: none;"></video>
                        <div class="preview-wrapper" style="display: none;">
                            <img id="preview" alt="Preview">
                        </div>
                        <div class="camera-controls">
                            <button type="button" id="startCamera" class="camera-btn">Start Camera</button>
                            <button type="button" id="takePicture" class="camera-btn" style="display: none;">Take Picture</button>
                            <button type="button" id="retakePicture" class="camera-btn" style="display: none;">Retake</button>
                        </div>
                    </div>
                </div>

                <button type="submit" class="scan-btn">🚀 Analyze</button>
            </form>
        </div>

        <!-- Scan Result -->
        {% if result %}
        <div class="scan-result">
            <img src="{{ url_for('static', filename='uploads/' + result.image_filename) }}" alt="Scanned Image" class="scan-preview">

            <div class="result-header-box">
                <div class="meta-item">
                    <span class="meta-label">Date:</span>
                    <span class="meta-value">{{ result.date.strftime('%Y-%m-%d %H:%M') }}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Fruit:</span>
                    <span class="meta-value">{{ result.fruit_name }}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Status:</span>
                    <span class="meta-value">{{ result.status }}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Status:</span>
                    <span class="meta-value">{{ result.analysis }}</span>
                </div>
            </div>

            <div class="nutrition-box">
                <h4>Nutrition</h4>
                <div class="nutrition-grid">
                    {% for key, value in result.nutrition.items() %}
                    <div class="nutrition-item">
                        <span class="label">{{ key|replace('_', ' ')|title }}</span>
                        <span class="value">
                            {% if key == 'calories' %}
                                {{ value }} kcal
                            {% elif key in ['protein', 'carbs', 'fiber', 'sugars', 'fat'] %}
                                {{ value }}g
                            {% elif key in ['vitamin_c', 'iron', 'calcium', 'potassium'] %}
                                {{ value }}mg
                            {% else %}
                                {{ value }}
                            {% endif %}
                        </span>
                    </div>
                    {% endfor %}
                </div>
            </div>

            <div class="synergic-box">
                <h4>Synergic Fruits</h4>
                <div class="formatted-text">
                    {{ result.synergic_fruits|markdown|safe }}
                </div>
            </div>
        </div>
        {% endif %}
    </section>
</div>

<script src="{{ url_for('static', filename='js/scan.js') }}"></script>
{% endblock %}